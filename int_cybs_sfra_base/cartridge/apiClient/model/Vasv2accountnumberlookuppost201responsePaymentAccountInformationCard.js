"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * CYBS Value Added Service REST API
 * A group of RESTful API that provides value added services to CyberSource clients.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }

    root.CyberSource.Vasv2accountnumberlookuppost201responsePaymentAccountInformationCard = factory(root.CyberSource.ApiClient);
  }
})(void 0, function (ApiClient) {
  'use strict';
  /**
   * The Vasv2accountnumberlookuppost201responsePaymentAccountInformationCard model module.
   * @module model/Vasv2accountnumberlookuppost201responsePaymentAccountInformationCard
   * @version 2.0.0
   */

  /**
   * Constructs a new <code>Vasv2accountnumberlookuppost201responsePaymentAccountInformationCard</code>.
   * @alias module:model/Vasv2accountnumberlookuppost201responsePaymentAccountInformationCard
   * @class
   */

  var exports = function exports() {
    var _this = this;
  };
  /**
   * Constructs a <code>Vasv2accountnumberlookuppost201responsePaymentAccountInformationCard</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Vasv2accountnumberlookuppost201responsePaymentAccountInformationCard} obj Optional instance to populate.
   * @return {module:model/Vasv2accountnumberlookuppost201responsePaymentAccountInformationCard} The populated <code>Vasv2accountnumberlookuppost201responsePaymentAccountInformationCard</code> instance.
   */


  exports.constructFromObject = function (data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('brandName')) {
        obj['brandName'] = ApiClient.convertToType(data['brandName'], 'String');
      }

      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }

      if (data.hasOwnProperty('subTypeCode')) {
        obj['subTypeCode'] = ApiClient.convertToType(data['subTypeCode'], 'String');
      }

      if (data.hasOwnProperty('productCategoryDescription')) {
        obj['productCategoryDescription'] = ApiClient.convertToType(data['productCategoryDescription'], 'String');
      }

      if (data.hasOwnProperty('currency')) {
        obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
      }

      if (data.hasOwnProperty('currencyMinorDigits')) {
        obj['currencyMinorDigits'] = ApiClient.convertToType(data['currencyMinorDigits'], 'String');
      }
    }

    return obj;
  };
  /**
   * Card brand, e.g. Visa, MasterCard, American Express ...etc.
   * @member {String} brandName
   */


  exports.prototype['brandName'] = undefined;
  /**
   * Three-digit value that indicates the card type.  For details, see the `card_type` field description in [BIN Lookup Service Using the SCMP API.](http://apps.cybersource.com/library/documentation/BIN_Lookup/BIN_Lookup_SCMP_API/html/) This field can be returned for mode A only. 
   * @member {String} type
   */

  exports.prototype['type'] = undefined;
  /**
   * Possible values:  - `Credit`  - `Prepaid`  - `Debit`  - `Charge Card`  - `Deferred Debit`  - `Unknown` 
   * @member {String} subTypeCode
   */

  exports.prototype['subTypeCode'] = undefined;
  /**
   * Category of product, such as business, commercial, or consumer. Applicable only for Mode 'A'
   * @member {String} productCategoryDescription
   */

  exports.prototype['productCategoryDescription'] = undefined;
  /**
   * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  For details about currency as used in partial authorizations, see \"Features for Debit Cards and Prepaid Cards\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. 
   * @member {String} currency
   */

  exports.prototype['currency'] = undefined;
  /**
   * Number of decimal positions for amounts in the cardholder's billing currency.
   * @member {String} currencyMinorDigits
   */

  exports.prototype['currencyMinorDigits'] = undefined;
  return exports;
});