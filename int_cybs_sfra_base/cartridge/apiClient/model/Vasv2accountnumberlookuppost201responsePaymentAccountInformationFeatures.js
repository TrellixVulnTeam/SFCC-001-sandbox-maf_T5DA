"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * CYBS Value Added Service REST API
 * A group of RESTful API that provides value added services to CyberSource clients.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeaturesBrands', 'model/Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeaturesNetwork'], factory);
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeaturesBrands'), require('./Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeaturesNetwork'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }

    root.CyberSource.Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeatures = factory(root.CyberSource.ApiClient, root.CyberSource.Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeaturesBrands, root.CyberSource.Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeaturesNetwork);
  }
})(void 0, function (ApiClient, Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeaturesBrands, Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeaturesNetwork) {
  'use strict';
  /**
   * The Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeatures model module.
   * @module model/Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeatures
   * @version 2.0.0
   */

  /**
   * Constructs a new <code>Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeatures</code>.
   * @alias module:model/Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeatures
   * @class
   */

  var exports = function exports() {
    var _this = this;
  };
  /**
   * Constructs a <code>Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeatures</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeatures} obj Optional instance to populate.
   * @return {module:model/Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeatures} The populated <code>Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeatures</code> instance.
   */


  exports.constructFromObject = function (data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('level2Eligible')) {
        obj['level2Eligible'] = ApiClient.convertToType(data['level2Eligible'], 'String');
      }

      if (data.hasOwnProperty('level3Eligible')) {
        obj['level3Eligible'] = ApiClient.convertToType(data['level3Eligible'], 'String');
      }

      if (data.hasOwnProperty('crossBorderIndicator')) {
        obj['crossBorderIndicator'] = ApiClient.convertToType(data['crossBorderIndicator'], 'String');
      }

      if (data.hasOwnProperty('fastFundsIndicator')) {
        obj['fastFundsIndicator'] = ApiClient.convertToType(data['fastFundsIndicator'], 'String');
      }

      if (data.hasOwnProperty('pushFundsBlockIndicator')) {
        obj['pushFundsBlockIndicator'] = ApiClient.convertToType(data['pushFundsBlockIndicator'], 'String');
      }

      if (data.hasOwnProperty('onlineGamblingBlockIndicator')) {
        obj['onlineGamblingBlockIndicator'] = ApiClient.convertToType(data['onlineGamblingBlockIndicator'], 'String');
      }

      if (data.hasOwnProperty('network')) {
        obj['network'] = ApiClient.convertToType(data['network'], [Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeaturesNetwork]);
      }

      if (data.hasOwnProperty('brands')) {
        obj['brands'] = ApiClient.convertToType(data['brands'], [Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeaturesBrands]);
      }
    }

    return obj;
  };
  /**
   * Indicates whether the card can be used for Level II transactions.  Possible values:  - `true`: Supported  - `false`: Not supported  - `Data not available`: if BIN files do not have this card's information 
   * @member {String} level2Eligible
   */


  exports.prototype['level2Eligible'] = undefined;
  /**
   * Indicates whether the card can be used for Level III transactions.  Possible values:  - `true`: Supported  - `false`: Not supported  - `Data not available`: if BIN files do not have this card's information 
   * @member {String} level3Eligible
   */

  exports.prototype['level3Eligible'] = undefined;
  /**
   * Indicates whether the card can be used internationally.  Possible values:  - `true`: Supported  - `false`: Not supported  - `Data not available`: if BIN files do not have this card's information 
   * @member {String} crossBorderIndicator
   */

  exports.prototype['crossBorderIndicator'] = undefined;
  /**
   * Speed at which funds are delivered to the account.  Possible values: - `B`: Within 30 minutes - `C`: Within 30 minutes - `D`: Within 30 minutes - `N`: Within 2 business days 
   * @member {String} fastFundsIndicator
   */

  exports.prototype['fastFundsIndicator'] = undefined;
  /**
   * Indicates whether the account can receive original credit transactions (OCTs).  Possible values: - `A`: Accepts only basic format OCTs. This value is allowed for U.S. issuers and non-U.S. issuers. - `B`: Accepts only enhanced format OCTs. This value is allowed only for U.S. issuers. - `C`: Accepts basic format and enhanced format OCTs. This value is allowed for U.S. issuers and       non-U.S. issuers. - `N`: Does not accepts OCTs. 
   * @member {String} pushFundsBlockIndicator
   */

  exports.prototype['pushFundsBlockIndicator'] = undefined;
  /**
   * Indicates whether the account can receive original credit transactions (OCTs) for gambling transactions.  Possible values: - `true` - `false` - `Data not available` 
   * @member {String} onlineGamblingBlockIndicator
   */

  exports.prototype['onlineGamblingBlockIndicator'] = undefined;
  /**
   * @member {Array.<module:model/Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeaturesNetwork>} network
   */

  exports.prototype['network'] = undefined;
  /**
   * @member {Array.<module:model/Vasv2accountnumberlookuppost201responsePaymentAccountInformationFeaturesBrands>} brands
   */

  exports.prototype['brands'] = undefined;
  return exports;
});